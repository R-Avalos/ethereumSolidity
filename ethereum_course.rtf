{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww13020\viewh6120\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Udemy Ethereum and Solidty Course\
\
\
Section 1\
MetaMask\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Main network\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Test networks: Rinkeby (used in this course), Ropsten, Kovan\
\
\
# Account Name: metamask name for accounts\
# Account Address: Similar to an email address\
# Public Key: \
# Private Key: required to send from account/public key\
Hexadecimal numbers\'85. Javascript converts to a base10 number for readability\
Account address connect to all ethereal networks\
\
Rinkeby-faucet.com to get test ether\
\
Web3js on backend server -> ethereum blockchain -> server waits for transaction confirms, then send message back\
\
Transaction:\
Record of one account sending property rights to another account\
Each transaction has a list of properties [\
Nonce (nonce = none sense) number of how many times a sender has sent a transaction\
To = address of the account property rights are going to\
Value = Value of ETH\
gasPrice = amount of ETH sender is willing to pay per unit of gas\
startGas/gasLimit = units of gas that transaction can consume\
V/R/S = sender\'92s key private key generates cryptographic pieces\
\
External Accounts = users\'92 accounts that are cross network\
Contract Accounts are specific to a network (deploy into Rinkeby test network, then if success deploy to main)\
\
\
ETH Contract Account \
Field [ description ]\
Balance [ amount of ether this account owns ]\
Storage [ data storage for contract ], a cubby where we can store some data for contract (numbers, strings, arrays)\
Code [ raw machine code for contract ], machine level code (we write code that compiles to this level)\
\
Smart Contract as a CLASS\
With many instances on the blockchain\
\

\b Solidity
\b0 \
Written in .sol files\
Strongly typed (javascript is dynamic\'85 )\
Similar to javascript ish\'85 but eh\'85 not really\
Has several huge, gigantic \'91gotchas\'92\
\
Contract definition (solidity) we write -> solidity compiler [ byte code ready for deployment, application binary interface (ABI)]\
The ABI is how the front end talks with the contract\
Javascript talks to ABI, which then sends signals to the blockchain in bytecode \
\
\

\b First Contract
\b0 \
Using ReMix IDE\
}